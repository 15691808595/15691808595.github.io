(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{197:function(a,e,t){a.exports=t.p+"assets/img/16c3616c85ea4e5e.753b394e.png"},210:function(a,e,t){"use strict";t.r(e);var s=t(0),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"用docker部署一个项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用docker部署一个项目"}},[a._v("#")]),a._v(" 用docker部署一个项目")]),a._v(" "),s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),s("p",[a._v("mac下 "),s("code",[a._v("brew cask install docker")])]),a._v(" "),s("p",[a._v("安装完成后，运行下面的命令，验证是否安装成功。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker version\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 或者")]),a._v("\n$ docker info\n")])])])]),a._v(" "),s("h2",{attrs:{id:"image-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#image-文件"}},[a._v("#")]),a._v(" image 文件")]),a._v(" "),s("p",[a._v("**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")]),a._v(" "),s("p",[a._v("image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出本机的所有 image 文件。")]),a._v("\n$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除 image 文件")]),a._v("\n$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("imageName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])]),a._v(" "),s("h2",{attrs:{id:"容器文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器文件"}},[a._v("#")]),a._v(" 容器文件")]),a._v(" "),s("p",[a._v("**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出本机正在运行的容器")]),a._v("\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出本机所有容器，包括终止运行的容器")]),a._v("\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" --all\n")])])])]),a._v(" "),s("p",[a._v("上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的"),s("code",[a._v("docker container kill")]),a._v("命令。")]),a._v(" "),s("p",[a._v("终止运行的容器文件，依然会占据硬盘空间，可以使用"),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/container_rm/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("docker container rm")]),s("OutboundLink")],1),a._v("命令删除。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])]),a._v(" "),s("p",[a._v("运行上面的命令之后，再使用"),s("code",[a._v("docker container ls --all")]),a._v("命令，就会发现被删除的容器文件已经消失了。")]),a._v(" "),s("h2",{attrs:{id:"dockerfile-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件"}},[a._v("#")]),a._v(" Dockerfile 文件")]),a._v(" "),s("p",[a._v("学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。")]),a._v(" "),s("p",[a._v("这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。")]),a._v(" "),s("p",[a._v("下面通过一个实例，演示如何编写 Dockerfile 文件。")]),a._v(" "),s("h2",{attrs:{id:"十、实例：制作自己的-docker-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、实例：制作自己的-docker-容器"}},[a._v("#")]),a._v(" 十、实例：制作自己的 Docker 容器")]),a._v(" "),s("p",[a._v("下面我以 "),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/08/koa.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("koa-demos"),s("OutboundLink")],1),a._v(" 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。")]),a._v(" "),s("p",[a._v("作为准备工作，请先"),s("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/archive/master.zip",target:"_blank",rel:"noopener noreferrer"}},[a._v("下载源码"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/ruanyf/koa-demos.git\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" koa-demos\n")])])])]),a._v(" "),s("h3",{attrs:{id:"编写-dockerfile-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写-dockerfile-文件"}},[a._v("#")]),a._v(" 编写 Dockerfile 文件")]),a._v(" "),s("p",[a._v("首先，在项目的根目录下，新建一个文本文件"),s("code",[a._v(".dockerignore")]),a._v("，写入下面的"),s("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/blob/master/.dockerignore",target:"_blank",rel:"noopener noreferrer"}},[a._v("内容"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v(".git\nnode_modules\nnpm-debug.log\n")])])])]),a._v(" "),s("p",[a._v("上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。")]),a._v(" "),s("p",[a._v("然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的"),s("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/blob/master/Dockerfile",target:"_blank",rel:"noopener noreferrer"}},[a._v("内容"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("FROM node:8.4\nCOPY "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" /app\nWORKDIR /app\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" --registry"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("https://registry.npm.taobao.org\nEXPOSE "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3000")]),a._v("\n")])])])]),a._v(" "),s("p",[a._v("上面代码一共五行，含义如下。")]),a._v(" "),s("blockquote",[s("ul",[s("li",[s("code",[a._v("FROM node:8.4")]),a._v("：该 image 文件继承官方的 node image，冒号表示标签，这里标签是"),s("code",[a._v("8.4")]),a._v("，即8.4版本的 node。")]),a._v(" "),s("li",[s("code",[a._v("COPY . /app")]),a._v("：将当前目录下的所有文件（除了"),s("code",[a._v(".dockerignore")]),a._v("排除的路径），都拷贝进入 image 文件的"),s("code",[a._v("/app")]),a._v("目录。")]),a._v(" "),s("li",[s("code",[a._v("WORKDIR /app")]),a._v("：指定接下来的工作路径为"),s("code",[a._v("/app")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("RUN npm install")]),a._v("：在"),s("code",[a._v("/app")]),a._v("目录下，运行"),s("code",[a._v("npm install")]),a._v("命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。")]),a._v(" "),s("li",[s("code",[a._v("EXPOSE 3000")]),a._v("：将容器 3000 端口暴露出来， 允许外部连接这个端口。")])])]),a._v(" "),s("h3",{attrs:{id:"_10-2-创建-image-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-创建-image-文件"}},[a._v("#")]),a._v(" 10.2 创建 image 文件")]),a._v(" "),s("p",[a._v("有了 Dockerfile 文件以后，就可以使用"),s("code",[a._v("docker image build")]),a._v("命令创建 image 文件了。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker image build -t koa-demo "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 或者")]),a._v("\n$ docker image build -t koa-demo:0.0.1 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])])]),a._v(" "),s("p",[a._v("上面代码中，"),s("code",[a._v("-t")]),a._v("参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是"),s("code",[a._v("latest")]),a._v("。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。")]),a._v(" "),s("p",[a._v("如果运行成功，就可以看到新生成的 image 文件"),s("code",[a._v("koa-demo")]),a._v("了。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n\n")])])])]),a._v(" "),s("h3",{attrs:{id:"_10-3-生成容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-生成容器"}},[a._v("#")]),a._v(" 10.3 生成容器")]),a._v(" "),s("p",[s("code",[a._v("docker container run")]),a._v("命令会从 image 文件生成容器。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container run -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8000")]),a._v(":3000 -it koa-demo /bin/bash\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 或者")]),a._v("\n$ docker container run -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8000")]),a._v(":3000 -it koa-demo:0.0.1 /bin/bash\n\n")])])])]),a._v(" "),s("p",[a._v("上面命令的各个参数含义如下：")]),a._v(" "),s("blockquote",[s("ul",[s("li",[s("code",[a._v("-p")]),a._v("参数：容器的 3000 端口映射到本机的 8000 端口。")]),a._v(" "),s("li",[s("code",[a._v("-it")]),a._v("参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。")]),a._v(" "),s("li",[s("code",[a._v("koa-demo:0.0.1")]),a._v("：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。")]),a._v(" "),s("li",[s("code",[a._v("/bin/bash")]),a._v("：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。")])])]),a._v(" "),s("p",[a._v("如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("root@66d80f4aaf1e:/app"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v("这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("root@66d80f4aaf1e:/app"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# node demos/01.js")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v('这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示"Not Found"，这是因为这个 '),s("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/blob/master/demos/01.js",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo"),s("OutboundLink")],1),a._v(" 没有写路由。")]),a._v(" "),s("p",[a._v("这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。")]),a._v(" "),s("p",[a._v("现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用"),s("code",[a._v("docker container kill")]),a._v("终止容器运行。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在本机的另一个终端窗口，查出容器的 ID")]),a._v("\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 停止指定的容器运行")]),a._v("\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v("容器停止运行之后，并不会消失，用下面的命令删除容器文件。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查出容器的 ID")]),a._v("\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" --all\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除指定的容器文件")]),a._v("\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v("也可以使用"),s("code",[a._v("docker container run")]),a._v("命令的"),s("code",[a._v("--rm")]),a._v("参数，在容器终止运行后自动删除容器文件。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container run --rm -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8000")]),a._v(":3000 -it koa-demo /bin/bash\n\n")])])])]),a._v(" "),s("h3",{attrs:{id:"_10-4-cmd-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-cmd-命令"}},[a._v("#")]),a._v(" 10.4 CMD 命令")]),a._v(" "),s("p",[a._v("上一节的例子里面，容器启动以后，需要手动输入命令"),s("code",[a._v("node demos/01.js")]),a._v("。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("FROM node:8.4\nCOPY "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" /app\nWORKDIR /app\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" --registry"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("https://registry.npm.taobao.org\nEXPOSE "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3000")]),a._v("\nCMD node demos/01.js\n\n")])])])]),a._v(" "),s("p",[a._v("上面的 Dockerfile 里面，多了最后一行"),s("code",[a._v("CMD node demos/01.js")]),a._v("，它表示容器启动后自动执行"),s("code",[a._v("node demos/01.js")]),a._v("。")]),a._v(" "),s("p",[a._v("你可能会问，"),s("code",[a._v("RUN")]),a._v("命令与"),s("code",[a._v("CMD")]),a._v("命令的区别在哪里？简单说，"),s("code",[a._v("RUN")]),a._v("命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；"),s("code",[a._v("CMD")]),a._v("命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个"),s("code",[a._v("RUN")]),a._v("命令，但是只能有一个"),s("code",[a._v("CMD")]),a._v("命令。")]),a._v(" "),s("p",[a._v("注意，指定了"),s("code",[a._v("CMD")]),a._v("命令以后，"),s("code",[a._v("docker container run")]),a._v("命令就不能附加命令了（比如前面的"),s("code",[a._v("/bin/bash")]),a._v("），否则它会覆盖"),s("code",[a._v("CMD")]),a._v("命令。现在，启动容器可以使用下面的命令。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container run --rm -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8000")]),a._v(":3000 -it koa-demo:0.0.1\n\n")])])])]),a._v(" "),s("h3",{attrs:{id:"_10-5-发布-image-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-发布-image-文件"}},[a._v("#")]),a._v(" 10.5 发布 image 文件")]),a._v(" "),s("p",[a._v("容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。")]),a._v(" "),s("p",[a._v("首先，去 "),s("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("hub.docker.com"),s("OutboundLink")],1),a._v(" 或 "),s("a",{attrs:{href:"https://cloud.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("cloud.docker.com"),s("OutboundLink")],1),a._v(" 注册一个账户。然后，用下面的命令登录。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker login\n\n")])])])]),a._v(" "),s("p",[a._v("接着，为本地的 image 标注用户名和版本。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker image tag "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("imageName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("repository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 实例")]),a._v("\n$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1\n\n")])])])]),a._v(" "),s("p",[a._v("也可以不标注用户名，重新构建一下 image 文件。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker image build -t "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("repository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v("最后，发布 image 文件。")]),a._v(" "),s("blockquote",[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker image push "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("repository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v("发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。")]),a._v(" "),s("h2",{attrs:{id:"引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[a._v("#")]),a._v(" 引用")]),a._v(" "),s("ul",[s("li",[a._v("http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html")])]),a._v(" "),s("h2",{attrs:{id:"今日图-有的时候我的代码会像这样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#今日图-有的时候我的代码会像这样"}},[a._v("#")]),a._v(" 今日图 - 有的时候我的代码会像这样")]),a._v(" "),s("p",[s("img",{attrs:{src:t(197),alt:"16c3616c85ea4e5e.png"}})])])}),[],!1,null,null,null);e.default=n.exports}}]);