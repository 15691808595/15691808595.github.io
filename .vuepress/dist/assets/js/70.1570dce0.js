(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{196:function(v,_,a){v.exports=a.p+"assets/img/acf524670274cfa46627b5d1afc8c23f.43341fd4.gif"},211:function(v,_,a){"use strict";a.r(_);var e=a(0),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"nginx-使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx-使用"}},[v._v("#")]),v._v(" nginx 使用")]),v._v(" "),e("p",[v._v("Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://static.lufficc.com/image/3a1b447093d27fc0dc299558189764bb.png",alt:"img"}})]),v._v(" "),e("p",[v._v("Nginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是"),e("strong",[v._v("加载")]),v._v("和"),e("strong",[v._v("验证")]),v._v("配置文件、"),e("strong",[v._v("维护")]),v._v("工作线程。")]),v._v(" "),e("p",[v._v("工作线程处理实际的请求，Nginx 采用"),e("strong",[v._v("基于事件")]),v._v("的模型和"),e("strong",[v._v("依赖操作系统")]),v._v("的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。")]),v._v(" "),e("p",[v._v("Nginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 "),e("code",[v._v("nginx.conf")]),v._v("，放在 "),e("code",[v._v("/usr/local/nginx/conf")]),v._v(" 、"),e("code",[v._v("/etc/nginx")]),v._v(" 或者 "),e("code",[v._v("/usr/local/etc/nginx")]),v._v(" 文件夹中。")]),v._v(" "),e("h2",{attrs:{id:"基本命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本命令"}},[v._v("#")]),v._v(" 基本命令")]),v._v(" "),e("p",[v._v("Nginx 启动之后，可以使用以下命令控制:")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copynginx -s <signal>\n")])])]),e("p",[v._v("其中"),e("code",[v._v("-s")]),v._v("意思是向主进程发送信号，"),e("code",[v._v("signal")]),v._v("可以为以下四个中的一个:")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("stop")]),v._v(" — 快速关闭")]),v._v(" "),e("li",[e("code",[v._v("quit")]),v._v(" — 优雅关闭")]),v._v(" "),e("li",[e("code",[v._v("reload")]),v._v(" — 重新加载配置文件")]),v._v(" "),e("li",[e("code",[v._v("reopen")]),v._v(" — 重新打开日志文件")])]),v._v(" "),e("p",[v._v("当运行"),e("code",[v._v("nginx -s quit")]),v._v("时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到"),e("code",[v._v("nginx -s reload")]),v._v("信号。")]),v._v(" "),e("p",[v._v("当 Nginx 收到 "),e("code",[v._v("nginx -s reload")]),v._v(" 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。")]),v._v(" "),e("h2",{attrs:{id:"配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[v._v("#")]),v._v(" 配置文件")]),v._v(" "),e("p",[v._v("Nginx 配置的核心是定义要处理的 "),e("code",[v._v("URL")]),v._v(" 以及如何响应这些 "),e("code",[v._v("URL")]),v._v(" 请求，即定义一系列的**虚拟服务器（Virtual Servers）**控制对来自特定域名或者 IP 的请求的处理。")]),v._v(" "),e("p",[v._v("每一个虚拟服务器定义一系列的 "),e("code",[v._v("location")]),v._v(" 控制处理特定的 URI 集合。每一个"),e("code",[v._v("location")]),v._v("定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。")]),v._v(" "),e("p",[v._v("Nginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为"),e("strong",[v._v("简单指令")]),v._v("和"),e("strong",[v._v("块指令")]),v._v("。")]),v._v(" "),e("p",[v._v("一个简单指令包含"),e("strong",[v._v("指令名称")]),v._v("和"),e("strong",[v._v("指令参数")]),v._v("，以空格分隔，以分号（"),e("code",[v._v(";")]),v._v("）结尾。 块指令与简单指令类似，但是由大括号（"),e("code",[v._v("{")]),v._v("和"),e("code",[v._v("}")]),v._v("）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： "),e("code",[v._v("events")]),v._v(", "),e("code",[v._v("http")]),v._v(", "),e("code",[v._v("server")]),v._v(" 和 "),e("code",[v._v("location")]),v._v("）。")]),v._v(" "),e("p",[v._v("配置文件中的放在上下文之外的指令默认放在"),e("strong",[v._v("主配置文件")]),v._v("中（类似继承主配置文件）。 "),e("code",[v._v("events")]),v._v(" 和 "),e("code",[v._v("http")]),v._v(" 放置在主配置文件中，"),e("code",[v._v("server")]),v._v(" 放置在"),e("code",[v._v("http")]),v._v("块指令中，"),e("code",[v._v("location")]),v._v("放置在"),e("code",[v._v("server")]),v._v("块指令中。")]),v._v(" "),e("p",[v._v("配置文件的注释以 "),e("code",[v._v("#")]),v._v(" 开始。")]),v._v(" "),e("h2",{attrs:{id:"静态内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态内容"}},[v._v("#")]),v._v(" 静态内容")]),v._v(" "),e("p",[v._v("Web 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从"),e("code",[v._v("/data/www")]),v._v(" 获取 html 文件，从"),e("code",[v._v("/data/images")]),v._v("获取图片来返回给客户端，这只需要在"),e("code",[v._v("http")]),v._v("块指令中的"),e("code",[v._v("server")]),v._v("块指令中设置两个"),e("code",[v._v("location")]),v._v("块指令。")]),v._v(" "),e("p",[v._v("首先，创建 "),e("code",[v._v("/data/www")]),v._v(" 目录，并放入 "),e("code",[v._v("index.html")]),v._v("，创建 "),e("code",[v._v("/data/images")]),v._v(" 目录并在其中放置一些图片。")]),v._v(" "),e("p",[v._v("接下来，打开配置文件。 创建一个 "),e("code",[v._v("server")]),v._v(" 块：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copyhttp {\n    server {\n    }\n}\n")])])]),e("p",[v._v("通常，配置文件可以包括多个 "),e("code",[v._v("server")]),v._v(" 块，它们以"),e("strong",[v._v("端口")]),v._v("和"),e("strong",[v._v("服务器名称")]),v._v("来区分。当 Nginx 决定某一个 "),e("code",[v._v("server")]),v._v(" 处理请求后，它将请求头中的 "),e("code",[v._v("URI")]),v._v(" 和 "),e("code",[v._v("server")]),v._v(" 块中的 "),e("code",[v._v("location")]),v._v(" 块进行对比。\n加入 "),e("code",[v._v("location")]),v._v(" 块指令到 "),e("code",[v._v("server")]),v._v(" 中：")]),v._v(" "),e("p",[v._v("将以下位置块添加到服务器块：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copylocation / {\n    root /data/www;\n}\n")])])]),e("p",[v._v("上面的 "),e("code",[v._v("location")]),v._v(" 块指定 "),e("code",[v._v("/")]),v._v(" 前缀与请求中的 "),e("code",[v._v("URI")]),v._v(" 对比。对于匹配的请求，"),e("code",[v._v("URI")]),v._v(" 将被添加到 "),e("code",[v._v("root")]),v._v(" 指令中指定的路径，即 "),e("code",[v._v("/data/www")]),v._v("，以此形成本地文件系统的路径，如访问"),e("code",[v._v("http://localhost/bog/welcome.html")]),v._v("，对应服务器文件路径为"),e("code",[v._v("/data/www/bog/welcome.html")]),v._v("。 如果 "),e("code",[v._v("URI")]),v._v(" 匹配多个 "),e("code",[v._v("location")]),v._v(" 块，Nginx 采用"),e("strong",[v._v("最长前缀匹配原则")]),v._v("（类似计算机网络里面的IP匹配）， 上面的 "),e("code",[v._v("location")]),v._v(" 块前缀长度为 1，因此只有当所有其他 "),e("code",[v._v("location")]),v._v(" 块匹配时，才使用该块。")]),v._v(" "),e("p",[v._v("接下来，添加第二个位置块：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copylocation /images/ {\n    root /data;\n}\n")])])]),e("p",[v._v("它将匹配以"),e("code",[v._v("/images/")]),v._v("（"),e("code",[v._v("/")]),v._v(" 也匹配这样的请求，但具有较短的前缀）开始的请求。")]),v._v(" "),e("p",[e("code",[v._v("server")]),v._v(" 块的最终配置如下：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copyserver {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n")])])]),e("p",[v._v("到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 "),e("code",[v._v("http://localhost/")]),v._v("。 对于 "),e("code",[v._v("/images/")]),v._v(" 开头的请求，服务器将从 "),e("code",[v._v("/data/images")]),v._v(" 目录发送文件。 如，对于 "),e("code",[v._v("http://localhost/images/example.png")]),v._v(" 请求，nginx 将响应 "),e("code",[v._v("/data/images/example.png")]),v._v("文件。 如果不存在，nginx 将返回404。"),e("code",[v._v("URI")]),v._v(" 不以 "),e("code",[v._v("/images/")]),v._v(" 开头的请求将映射到 "),e("code",[v._v("/data/www")]),v._v(" 目录。 例如，对于 "),e("code",[v._v("http://localhost/some/example.html")]),v._v(" 请求，nginx 将响应 "),e("code",[v._v("/data/www/some/example.html")]),v._v(" 文件。")]),v._v(" "),e("h2",{attrs:{id:"代理服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理服务器"}},[v._v("#")]),v._v(" 代理服务器")]),v._v(" "),e("p",[v._v("Nginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。")]),v._v(" "),e("p",[v._v("比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。")]),v._v(" "),e("p",[v._v("首先，向 Nginx 的配置文件中添加一个 "),e("code",[v._v("server")]),v._v(" 块来定义代理服务器：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copyserver {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n")])])]),e("p",[v._v("此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 "),e("code",[v._v("/data/up1")]),v._v(" 目录。 创建此目录并将 "),e("code",[v._v("index.html")]),v._v(" 放入其中。 注意，"),e("code",[v._v("root")]),v._v(" 指令放在 "),e("code",[v._v("server")]),v._v(" 上下文中，这样 当 "),e("code",[v._v("location")]),v._v(" 块中不含 "),e("code",[v._v("root")]),v._v(" 指令时将使用所属 "),e("code",[v._v("server")]),v._v(" 的 "),e("code",[v._v("root")]),v._v(" 指令。")]),v._v(" "),e("p",[v._v("接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上"),e("code",[v._v("proxy_pass")]),v._v("指令：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copyserver {\n    location / {\n           # proxy_pass指令的参数为：协议+主机名+端口号\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n")])])]),e("p",[v._v("修改第二个 匹配 "),e("code",[v._v("/images/")]),v._v(" 前缀的 "),e("code",[v._v("location")]),v._v(" 块，使其与请求图像文件的扩展名相匹配：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copylocation ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n")])])]),e("p",[v._v("该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 "),e("code",[v._v("~")]),v._v(" 开头。 相应的请求将映射到 "),e("code",[v._v("/data/images")]),v._v(" 目录。")]),v._v(" "),e("p",[v._v("当 Nginx 选择一个 "),e("code",[v._v("location")]),v._v(" 块来处理请求时，它首先检查指定 "),e("code",[v._v("location")]),v._v(" 块的前缀，记住具有最长前缀的 "),e("code",[v._v("location")]),v._v(" 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 "),e("code",[v._v("location")]),v._v(" 块，否则，选择先前记住的 "),e("code",[v._v("location")]),v._v(" 块。")]),v._v(" "),e("p",[v._v("代理服务器的最终配置如下：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copyserver {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n")])])]),e("p",[v._v("此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 "),e("code",[v._v("/data/images")]),v._v(" 目录（通过向 "),e("code",[v._v("root")]),v._v(" 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。")]),v._v(" "),e("p",[v._v("这样，图片和其他请求就可以使用不同的服务器来处理。")]),v._v(" "),e("h2",{attrs:{id:"fastcgi代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastcgi代理"}},[v._v("#")]),v._v(" FastCGI代理")]),v._v(" "),e("p",[v._v("Nginx 可用于将请求路由到 FastCGI 服务器。快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。因此 Nginx 可以将请求路由到 FastCGI 运行的应用程序，如 PHP 程序。")]),v._v(" "),e("p",[v._v("使用 FastCGI 服务器的最基本的 Nginx 配置包括使用 "),e("code",[v._v("fastcgi_pass")]),v._v(" 指令而不是 "),e("code",[v._v("proxy_pass")]),v._v(" 指令，以及使用 "),e("code",[v._v("fastcgi_param")]),v._v(" 指令来设置传递给 FastCGI 服务器的参数。 假设FastCGI服务器可在 "),e("code",[v._v("localhost:9000")]),v._v(" 上访问。 以上一节中的代理服务器配置为基础，使用"),e("code",[v._v("fastcgi_pass")]),v._v("指令替换"),e("code",[v._v("proxy_pass")]),v._v("指令，并将参数更改为 "),e("code",[v._v("localhost:9000")]),v._v(" 。 在 PHP 中， "),e("code",[v._v("SCRIPT_FILENAME")]),v._v(" 参数用于确定脚本名称，而 "),e("code",[v._v("QUERY_STRING")]),v._v(" 参数用于传递请求参数。 生成的配置将是：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("Copyserver {\n    location / {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param QUERY_STRING    $query_string;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n")])])]),e("p",[v._v("这将设置一个服务器，将路由除静态图像以外的所有请求到运行在 "),e("code",[v._v("localhost:9000")]),v._v(" 的 FastCGI 服务器。")]),v._v(" "),e("h2",{attrs:{id:"gzip压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gzip压缩"}},[v._v("#")]),v._v(" gzip压缩")]),v._v(" "),e("ul",[e("li",[v._v("gzip配置的常用参数")]),v._v(" "),e("li",[v._v("gzip on|off;  #是否开启gzip")]),v._v(" "),e("li",[v._v("gzip_buffers 32 4K| 16 8K #缓冲(压缩在内存中缓冲几块? 每块多大?)")]),v._v(" "),e("li",[v._v("gzip_comp_level [1-9] #推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)")]),v._v(" "),e("li",[v._v("gzip_disable #正则匹配UA 什么样的Uri不进行gzip")]),v._v(" "),e("li",[v._v("gzip_min_length 200 # 开始压缩的最小长度(再小就不要压缩了,意义不在)")]),v._v(" "),e("li",[v._v("gzip_http_version 1.0|1.1 # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)")]),v._v(" "),e("li",[v._v("gzip_proxied          # 设置请求者代理服务器,该如何缓存内容")]),v._v(" "),e("li",[v._v("gzip_types text/plain application/xml # 对哪些类型的文件用压缩 如txt,xml,html ,css")]),v._v(" "),e("li",[v._v("gzip_vary on|off  # 是否传输gzip压缩标志")])]),v._v(" "),e("p",[v._v("例如 以下是配置")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v('  gzip on;\n\tgzip_buffers 32 4K;\n\tgzip_comp_level 6;\n  gzip_min_length 100;\n\tgzip_types application/javascript text/css text/xml;\n\tgzip_disable "MSIE [1-6]\\."; #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）\n  gzip_vary on;\n')])])]),e("h2",{attrs:{id:"查看安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看安装"}},[v._v("#")]),v._v(" 查看安装")]),v._v(" "),e("p",[v._v("查看软件安装路径\n"),e("code",[v._v("whereis nginx")])]),v._v(" "),e("p",[v._v("查询运行文件所在路径\n"),e("code",[v._v("which nginx")])]),v._v(" "),e("p",[e("code",[v._v("nginx -t")]),v._v(" 检查配置文件")]),v._v(" "),e("h2",{attrs:{id:"引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[v._v("#")]),v._v(" 引用")]),v._v(" "),e("ul",[e("li",[v._v("https://lufficc.com/blog/nginx-for-beginners")]),v._v(" "),e("li",[v._v("https://www.cnblogs.com/qianpangzi/p/10922420.html")])]),v._v(" "),e("h2",{attrs:{id:"今日图-自测代码后要上线了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#今日图-自测代码后要上线了"}},[v._v("#")]),v._v(" 今日图 - 自测代码后要上线了")]),v._v(" "),e("p",[e("img",{attrs:{src:a(196),alt:"16ac3747430c8cd7.gif"}})])])}),[],!1,null,null,null);_.default=t.exports}}]);