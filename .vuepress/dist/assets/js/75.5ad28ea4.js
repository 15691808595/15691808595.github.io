(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{195:function(t,a,s){t.exports=s.p+"assets/img/16a8d22958e71066.5f6fbc1b.png"},212:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" git命令")]),t._v(" "),e("h2",{attrs:{id:"在mac上配置全局的git忽略文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在mac上配置全局的git忽略文件"}},[t._v("#")]),t._v(" 在Mac上配置全局的Git忽略文件")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" ~/.gitignore_global\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.excludesfile ~/.gitignore_global\n")])])]),e("h2",{attrs:{id:"获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取"}},[t._v("#")]),t._v(" 获取")]),t._v(" "),e("p",[t._v("这些在 "),e("code",[t._v("shell")]),t._v(" 脚本中会很有用")]),t._v(" "),e("ul",[e("li",[t._v("获取当前用户名："),e("code",[t._v("git config user.name")])]),t._v(" "),e("li",[t._v("获取当前分支: "),e("code",[t._v("git symbolic-ref --short HEAD")])]),t._v(" "),e("li",[t._v("git获取最近一次提交的commit id:"),e("code",[t._v("git rev-parse HEAD")])])]),t._v(" "),e("h2",{attrs:{id:"正常提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正常提交"}},[t._v("#")]),t._v(" 正常提交")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"提交内容"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin 分支名\n")])])]),e("h2",{attrs:{id:"初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),e("p",[t._v("设置用户名，邮箱")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Author Name"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Author Email"')]),t._v("\n")])])]),e("p",[t._v("查看邮箱用户名等选项")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("gitc onfig --list\n")])])]),e("p",[t._v("初始化一个Git仓库，使用"),e("code",[t._v("git init")]),t._v("命令。\n第一步，使用命令"),e("code",[t._v("git add .")]),t._v(",添加全部 ，注意，可反复多次使用，添加多个文件；\n第二步，使用命令"),e("code",[t._v('git commit -m "提交的注释"')]),t._v("，完成。")]),t._v(" "),e("p",[t._v("运行"),e("code",[t._v("git status")]),t._v("命令看看结果\n运行"),e("code",[t._v("git diff")]),t._v("这个命令可查看我们修改了什么内容\n第一步："),e("code",[t._v("git add .")]),t._v("\n第二步："),e("code",[t._v('git commit -m "写改动的注释"')])]),t._v(" "),e("h2",{attrs:{id:"版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),e("p",[t._v("通过"),e("code",[t._v("git log")]),t._v("来查看版本（加上"),e("code",[t._v("--pretty=oneline")]),t._v("参数查看关键信息）：\n"),e("code",[t._v("git")]),t._v("中，用"),e("code",[t._v("HEAD")]),t._v("表示当前版本，上一个版本就是"),e("code",[t._v("HEAD^")]),t._v("，上上一个版本就是"),e("code",[t._v("HEAD^^")]),t._v("，当然往上100个版本写100个^比较容易数不过来，所以写成"),e("code",[t._v("HEAD~100")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("HEAD")]),t._v("指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令"),e("code",[t._v("git reset --hard commit_id")]),t._v("。\n穿梭前，用"),e("code",[t._v("git log")]),t._v("可以查看提交历史，以便确定要回退到哪个版本。\n要重返未来，用"),e("code",[t._v("git reflog")]),t._v("查看命令历史，以便确定要回到未来的哪个版本。")]),t._v(" "),e("h3",{attrs:{id:"删除之前的提交记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除之前的提交记录"}},[t._v("#")]),t._v(" 删除之前的提交记录")]),t._v(" "),e("p",[t._v("找到提交的"),e("code",[t._v("commit_id")]),t._v(",\n先"),e("code",[t._v("git checkout <commit_id>")]),t._v("，然后"),e("code",[t._v("git push origin <commit_id> --force")]),t._v(",这个要慎重，删除了就没有了。")]),t._v(" "),e("h2",{attrs:{id:"工作区和暂存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区"}},[t._v("#")]),t._v(" 工作区和暂存区")]),t._v(" "),e("p",[t._v("前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n第一步是用"),e("code",[t._v("git add")]),t._v("把文件添加进去，实际上就是把文件修改添加到暂存区；\n第二步是用"),e("code",[t._v("git commit")]),t._v("提交更改，实际上就是把暂存区的所有内容提交到当前分支。")]),t._v(" "),e("h2",{attrs:{id:"撤销修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),e("p",[e("strong",[t._v("git reflog 记录每一次操作，可进行回滚")]),t._v(" "),e("strong",[t._v("git 优雅的撤销中间某次提交？")]),t._v(" "),e("a",{attrs:{href:"https://blog.csdn.net/u013066244/article/details/79920012",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/u013066244/article/details/79920012"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("有时候我们希望只合并某个分支上的某次修改commit到指定的分支上.那么就可以使用"),e("code",[t._v("cherry-pick")]),t._v("命令来操作了.")])]),t._v(" "),e("p",[t._v("使用git log 查看提交的信息,记住commit id.")]),t._v(" "),e("p",[t._v("git checkout 要修改的分支")]),t._v(" "),e("p",[t._v("git cherry-pick 某个commit id   // 把某个commit id的提交合并到当前分支.")]),t._v(" "),e("p",[t._v("在修改了文件之后，且还没有"),e("code",[t._v("add")]),t._v("之前，可执行以下命令丢弃工作区的修改。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout –- readme.txt\n")])])]),e("p",[e("code",[t._v("git checkout -- file")]),t._v("命令中的"),e("code",[t._v("--")]),t._v("很重要，没有"),e("code",[t._v("--")]),t._v("，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到"),e("code",[t._v("git checkout")]),t._v("命令")]),t._v(" "),e("p",[t._v("如果你想要修改，已经"),e("code",[t._v("git add")]),t._v("到暂存区，但还没有"),e("code",[t._v("commit")]),t._v("的内容。\n我们可以用命令"),e("code",[t._v("git reset HEAD file")]),t._v("可以把暂存区的修改撤销掉（unstage），重新放回工作区：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD readme.txt\n")])])]),e("p",[e("code",[t._v("git reset")]),t._v("命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用"),e("code",[t._v("HEAD")]),t._v("时，表示最新的版本。")]),t._v(" "),e("h3",{attrs:{id:"丢弃文件命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#丢弃文件命令"}},[t._v("#")]),t._v(" 丢弃文件命令")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git checkout .")]),t._v(" # 丢弃所有修改或删除，不影响新增或未跟踪的文件。会递归下级目录")]),t._v(" "),e("li",[e("code",[t._v("git clean -nxdf")]),t._v(" # dry-run，先看下即将删除那些文件，再执行下面的危险命令")]),t._v(" "),e("li",[e("code",[t._v("git clean -df")]),t._v(" # 删除所有未跟踪的文件和目录（不包含.gitignore的文件），危险命令")]),t._v(" "),e("li",[e("code",[t._v("git clean -xdf")]),t._v(" # 删除所有未跟踪的文件和目录（同时包含.gitignore的文件），危险命令")])]),t._v(" "),e("h3",{attrs:{id:"将当前提交撤回到commitb-hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将当前提交撤回到commitb-hash"}},[t._v("#")]),t._v(" 将当前提交撤回到commitB_hash")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset –-hard commitB_hash\n")])])]),e("h3",{attrs:{id:"将工作区，暂存区强制恢复成-commitb-hash的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将工作区，暂存区强制恢复成-commitb-hash的状态"}},[t._v("#")]),t._v(" 将工作区，暂存区强制恢复成 commitB_hash的状态")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset  commitB_hash\n")])])]),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000011969554#articleHeader7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git的4个阶段的撤销更改"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"git-stash用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-stash用法"}},[t._v("#")]),t._v(" git stash用法")]),t._v(" "),e("h3",{attrs:{id:"保存当前修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#保存当前修改"}},[t._v("#")]),t._v(" 保存当前修改")]),t._v(" "),e("p",[t._v("git stash会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。stash是本地的，不会通过git push命令上传到git server上。")]),t._v(" "),e("h3",{attrs:{id:"重新应用缓存的stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重新应用缓存的stash"}},[t._v("#")]),t._v(" 重新应用缓存的stash")]),t._v(" "),e("p",[t._v("可以通过git stash pop命令恢复之前缓存的工作目录，这个指令将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下")]),t._v(" "),e("h3",{attrs:{id:"查看现有stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看现有stash"}},[t._v("#")]),t._v(" 查看现有stash")]),t._v(" "),e("p",[t._v("可以使用git stash list命令， 点击查看"),e("a",{attrs:{href:"https://www.cnblogs.com/tocy/p/git-stash-reference.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多stash用法"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),e("p",[t._v("一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用"),e("code",[t._v("rm")]),t._v("命令删了：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" test.txt\n")])])]),e("p",[t._v("这个时候，"),e("code",[t._v("Git")]),t._v("知道你删除了文件，因此，工作区和版本库就不一致了，"),e("code",[t._v("git status")]),t._v("命令会立刻告诉你哪些文件被删除了：\n现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令"),e("code",[t._v("git rm")]),t._v("删掉，并且"),e("code",[t._v("git commit")]),t._v("：")]),t._v(" "),e("p",[t._v("另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- test.txt\n")])])]),e("p",[e("code",[t._v("git checkout")]),t._v("其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。")]),t._v(" "),e("h2",{attrs:{id:"分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),e("p",[t._v("git查看当前分支所属")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -vv\n")])])]),e("p",[t._v("创建与合并分支\n首先创建"),e("code",[t._v("dev")]),t._v("分支，然后切换到"),e("code",[t._v("dev")]),t._v("分支")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout –b dev\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout - "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-代表上一个分支名，这里是简写"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSwitched to a new branch "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dev'")]),t._v("\n")])])]),e("p",[t._v("git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch dev\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\nSwitched to branch "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dev'")]),t._v("\n")])])]),e("p",[e("code",[t._v("git branch –a")]),t._v(" 查看当前仓库的所有分支；"),e("code",[t._v("git branch –r")]),t._v("查看远程仓库的所有分支")]),t._v(" "),e("p",[e("code",[t._v("dev")]),t._v("分支的工作成果合并到"),e("code",[t._v("master")]),t._v("分支上：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge dev\n")])])]),e("h3",{attrs:{id:"修改分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改分支"}},[t._v("#")]),t._v(" 修改分支")]),t._v(" "),e("p",[t._v("如果对于分支不是当前分支，可以使用下面代码：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m 原名 新\n")])])]),e("p",[t._v("如果是当前，那么可以使用加上新名字")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m 原名\n")])])]),e("h3",{attrs:{id:"混乱的分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混乱的分支"}},[t._v("#")]),t._v(" 混乱的分支")]),t._v(" "),e("p",[t._v("报错"),e("code",[t._v("$ git checkout -b *** fatal: cannot lock ref 'refs/heads/***': 'refs/heads/***' exists; cannot create 'refs/heads/user/***'")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n")])])]),e("h1",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("查看分支："),e("code",[t._v("git branch")])])]),t._v(" "),e("li",[e("p",[t._v("创建分支："),e("code",[t._v("git branch")])])]),t._v(" "),e("li",[e("p",[t._v("切换分支："),e("code",[t._v("git checkout")])])]),t._v(" "),e("li",[e("p",[t._v("创建 切换分支："),e("code",[t._v("git checkout -b")])])]),t._v(" "),e("li",[e("p",[t._v("合并某分支到当前分支："),e("code",[t._v("git merge")])])]),t._v(" "),e("li",[e("p",[t._v("删除本地分支："),e("code",[t._v("git branch -D 分支名")])])]),t._v(" "),e("li",[e("p",[t._v("删除远程分支："),e("code",[t._v("git push origin --delete 分支名")])])]),t._v(" "),e("li",[e("p",[t._v("提交："),e("code",[t._v("git branch origin 远程分支名称")])])])]),t._v(" "),e("h2",{attrs:{id:"自定义git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义git"}},[t._v("#")]),t._v(" 自定义Git")]),t._v(" "),e("p",[t._v("配置命令别名\n本节是教你如何偷懒的。\n如果敲"),e("code",[t._v("git st")]),t._v("就表示"),e("code",[t._v("git status")]),t._v("那就简单多了，当然这种偷懒的办法我们是极力赞成的。\n我们只需要敲一行命令，告诉"),e("code",[t._v("Git")]),t._v("，以后"),e("code",[t._v("st")]),t._v("就表示"),e("code",[t._v("status")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.st status\n")])])]),e("p",[t._v("当然还有别的命令可以简写，很多人都用"),e("code",[t._v("co")]),t._v("表示"),e("code",[t._v("checkout")]),t._v("，"),e("code",[t._v("ci")]),t._v("表示"),e("code",[t._v("commit")]),t._v("，"),e("code",[t._v("br")]),t._v("表示"),e("code",[t._v("branch")])]),t._v(" "),e("h2",{attrs:{id:"其它技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其它技巧"}},[t._v("#")]),t._v(" 其它技巧")]),t._v(" "),e("p",[t._v("之前上传过的文件夹想要忽略怎么办？这行这个，然后正常提交ok\n"),e("code",[t._v("git rm -r --cached .")])]),t._v(" "),e("p",[t._v("查看某一段代码谁写的 "),e("code",[t._v("git blame file.js -L 1,2")])]),t._v(" "),e("h2",{attrs:{id:"安全重命名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全重命名"}},[t._v("#")]),t._v(" 安全重命名")]),t._v(" "),e("p",[e("code",[t._v("git mv <old-name> <new-name>")])]),t._v(" "),e("h2",{attrs:{id:"并入你最近的一次-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并入你最近的一次-commit"}},[t._v("#")]),t._v(" 并入你最近的一次 commit")]),t._v(" "),e("p",[e("code",[t._v("git commit --amend --no-edit")])]),t._v(" "),e("p",[t._v("这条命令会把你暂存的修改并入你最近的一次 commit，并且不会修改这次 commit 的信息（\n这样 Git 也就不会打开一个文件编辑界面了。\n它最经常的用途是修改刚刚提交的 commit。也许我太粗心了，\n总是在刚提交完一条 commit 还不到 30 秒，就发现一个拼写错误或者忘了删除了调式信息了")]),t._v(" "),e("h2",{attrs:{id:"撤销远程操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销远程操作"}},[t._v("#")]),t._v(" 撤销远程操作")]),t._v(" "),e("p",[t._v("已经提交到远程了，不想要了，怎么办？")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("分支名"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("这个操作非常危险，如果别人也提交了，他的也会不存在")]),t._v(" "),e("h2",{attrs:{id:"git-子模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-子模块"}},[t._v("#")]),t._v(" git 子模块")]),t._v(" "),e("h3",{attrs:{id:"克隆所有子模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#克隆所有子模块"}},[t._v("#")]),t._v(" 克隆所有子模块")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone --recursive git://github.com/foo/bar.git\n")])])]),e("p",[t._v("如果已经克隆了")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update --init --recursive\n")])])]),e("h3",{attrs:{id:"添加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加"}},[t._v("#")]),t._v(" 添加")]),t._v(" "),e("p",[t._v("为当前工程添加submodule，命令如下")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 仓库地址 路径\n")])])]),e("p",[t._v("其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。\n注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 "),e("code",[t._v("Clone")]),t._v("），不写路径默认当前文件夹")]),t._v(" "),e("p",[t._v("命令执行完成，会在当前工程根路径下生成一个名为“"),e("code",[t._v(".gitmodules")]),t._v("”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。")]),t._v(" "),e("h3",{attrs:{id:"删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),e("p",[e("code",[t._v("submodule")]),t._v("的删除稍微麻烦点：首先，要在“"),e("code",[t._v(".gitmodules")]),t._v("”文件中删除相应配置信息。然后，执行“"),e("code",[t._v("git rm –cached")]),t._v(" ”命令将子模块所在的文件从git中删除。")]),t._v(" "),e("h3",{attrs:{id:"下载的工程带有submodule"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载的工程带有submodule"}},[t._v("#")]),t._v(" 下载的工程带有submodule")]),t._v(" "),e("p",[t._v("当使用"),e("code",[t._v("git clone")]),t._v("下来的工程中带有"),e("code",[t._v("submodule")]),t._v("时，初始的时候，"),e("code",[t._v("submodule")]),t._v("的内容并不会自动下载下来的，此时，只需执行如下命令：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update --init --recursive\n")])])]),e("p",[t._v("即可将子模块内容下载下来后工程才不会缺少相应的文件。")]),t._v(" "),e("h3",{attrs:{id:"修改子模块并提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改子模块并提交"}},[t._v("#")]),t._v(" 修改子模块并提交")]),t._v(" "),e("p",[t._v("进入子模块目录下，进行"),e("code",[t._v("git add .")]),t._v(","),e("code",[t._v('git commit -m ""')]),t._v(","),e("code",[t._v("git push origin origin")]),t._v("操作\n最后在主模块提交")]),t._v(" "),e("h3",{attrs:{id:"添加ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加ssh"}},[t._v("#")]),t._v(" 添加ssh")]),t._v(" "),e("ul",[e("li",[t._v("https://juejin.im/post/5ac0a382f265da238533012d")])]),t._v(" "),e("h3",{attrs:{id:"git-钩子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-钩子"}},[t._v("#")]),t._v(" git 钩子")]),t._v(" "),e("p",[e("code",[t._v("pre-commit")]),t._v(" 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 "),e("code",[t._v("git commit --no-verify")]),t._v("来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 lint 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint --ext .js, src"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint:fix"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint -- --fix"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("p",[t._v("git提交前会验证lint命令")]),t._v(" "),e("p",[t._v("更多查看"),e("a",{attrs:{href:"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("在线学习git使用 "),e("a",{attrs:{href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://learngitbranching.js.org/"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"今日图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#今日图"}},[t._v("#")]),t._v(" 今日图")]),t._v(" "),e("p",[e("img",{attrs:{src:s(195),alt:"16a8d22958e71066.png"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);